*definitive* *vim-definitive*

*definitive.txt* Find variable/class/function definitions without relying on tags

===============================================================================
CONTENTS                                                 *definitive-contents*

    1. Commands ............. |definitive-commands|
    2. Mappings ............. |definitive-mappings|
    3. Settings ............. |definitive-settings|


Section 1: Commands                                      *definitive-commands*

                                                             *:FindDefinition*
:FindDefinition [arg]         Search for the definition of arg. If no arg is
                              provided, search for the definition of the |word|
                              under the cursor

                              All matches are populated into the quickfix
                              list. If a single match is found, FindDefinition
                              will jump to the definition immediately. If more
                              than one match is found, FindDefinition will
                              open the quickfix list and jump to the first
                              match. If there is a match within the current
                              file, FindDefinition will jump to the first
                              match before the cursor, opening the quickfix
                              list if there are any more matches.


Section 2: Mappings                                      *definitive-mappings*

  No mappings are created by default, so I recommend mapping |:FindDefinition|
  to something simple, a la:
>
    nnoremap <Leader>d :FindDefinition
<

Section 3: Settings                                      *definitive-settings*

|g:definitive_definitions|                            *g:definitive_definitions*

|g:definitive_definitions| is the regex dictionary used to search for
definitions based on filetype. To append to this dictionary or override an
existing definition, simply extend g:definitive_definitions as follows:
>
    let g:definitive_definitions = {
          \ 'javascript': '\<\(\(const\|let\|var\)\s\+%1\>\|\(function\s\+\)\=%1\s*(.*)\s*{\|class\s\+%1\s*{\)',
          \ 'some_other_filetype': 'some\+other.*fancy\\regex\s%1'
          \}
<
Note: %1 is used as the placeholder for the keyword that will be grepped for,
so don't forget to include it somewhere in your regex.

You can also specify that a filetype should use the same regex as another
filetype by using 'extends' as follows:
>
    let g:definitive_definitions = {
        \ 'javascript.jsx': { 'extends': 'javascript' }
        \}
<
PS: If you can come up with a regex for a language that vim-definitive does
not currently support by default, let me know or create a PR!

|g:definitive_root_markers|                          *g:definitive_root_markers*

|g:definitive_root_markers| is the list of project root directory markers.
These are files or directories which typically mark the root directory of a
given project. vim-definitive uses this list to determine where it should be
looking when it is searching for definitions. Common examples include .git or
.hg directories or a Makefile, Gemfile, or Pipfile, and so on. You can extend
this list as follows:
>
    let g:definitive_root_markers = {
          \ 'all': [ '.git', '.gitignore', '.hg', '.hgignore', 'Makefile' ],
          \ 'javascript': [ 'package.json' ]
          \}
<
Note that this is filetype-specific, and that vim-definitive will search first
for those files listed for the current filetype, and then for any listed under
'all'.

Also note that your extensions will overwrite the defaults for that filetype.
For example, the default for javascript is to look for package.json, so if you
did something like `javascript: [ 'node_modules' ]`, vim-definitive would no
longer look for the package.json file.

|g:definitive_jump_to_first_match|            *g:definitive_jump_to_first_match*

If 2, always jump to the first match found.
If 1, only jump to the first match found if there is only a single match.
If 0, never jump to the first match found.
default: 1

Note: Regardless of what this is set to, vim-definitive will always jump to a
match if there is one found within the current file.

|g:definitive_open_quickfix|                        *g:definitive_open_quickfix*

If 2, always open the quickfix list.
If 1, only open the quickfix list if there is more than one match.
If 0, never open the quickfix list, even if there is more than one match.
default: 1


 vim:tw=78:ts=8:ft=help:norl:
